
# This pipeline (gitlab-ci.yaml) logs on to vault , reads a secret and uses that secret to run whatever Terraform code exists in this folder
#
#  Written around January of 2021
#  Mamun Rashid
#
# Example company name: abc_company
# 

# Every stage spawns a container in background, we tell it what kind of container it should spawn
image:
  name: hashicorp/terraform:0.12.25
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'


## before_script runs on every stage
#
# $VAULT_TOKEN and $VAULT_ADDR are variables defined in the gitlab pipeline outside this code
#
# Magic happens in the second to last line ("vault read")
#
before_script:
  - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/abc_company/abc_company-sre/iac-terraform/terraform-modules/gcp/terraform-google-arc_gcsbuckets.git
  - ls ./terraform-google-arc_gcsbuckets
  - rm -rf .terraform
  - terraform --version
  - uname -a
  - wget https://releases.hashicorp.com/vault/1.5.4/vault_1.5.4_linux_amd64.zip
  - unzip vault_1.5.4_linux_amd64.zip
  - chmod 744 ./vault
  - ./vault -v
  - echo $VAULT_ADDR
  - ./vault status
  - ./vault login $VAULT_TOKEN
  - ./vault read -format=json gcp/key/gitlab
  - wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
  - mv jq-linux64 jq
  - chmod 744 jq
  - mkdir creds
  - ./vault read -format=json gcp/key/gitlab | ./jq  '.data.private_key_data' | sed 's/^.\(.*\).$/\1/' | base64 -d > ./creds/serviceaccount.json
  - terraform init


# We have 3 stages, validate , plan and apply
#
stages:
  - validate
  - plan
  - apply


#
validate:
  stage: validate
  script:
    - terraform validate

#
plan:
  stage: plan
  script:
    - terraform plan -out "planfile"
  dependencies:
    - validate
  artifacts:
    paths:
      - planfile

#
#  Note it uses the planfile generated in the previous stage
#
apply:
  stage: apply
  script:
    - terraform apply -input=false "planfile"
  dependencies:
    - plan
#
#
